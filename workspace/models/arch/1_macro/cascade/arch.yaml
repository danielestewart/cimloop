{{include_text('defines.yaml')}}

architecture:
  nodes: &macro # TOP MACRO
  # ===========================================================================
  - !Container # Macro top-level
    name: macro
    <<<: [*container_defaults]

  - !Component # Column readout (ADC)
    name: adc
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: isaac_adc
    attributes: {width: ENCODED_OUTPUT_BITS, <<<: *cim_component_attributes}


    
  - !Component
    name: sum_amp
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: capacitor
    attributes: 
      capacitance:       1e-15 * 128
      voltage:           VOLTAGE
      width:             ENCODED_OUTPUT_BITS
      stacked: True

  - !Component # Column readout (ADC)
    name: column_drivers_2
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: column_drivers
    attributes: {width: 16, <<<: *cim_component_attributes}
    
  - !Component
    name: buffer_rram
    # Set our storage with default values, have it keep outputs, and let it temporally reuse.
    <<<: [*component_defaults, *keep_outputs, *temporal_reuse]
    # Dummy_storage components have zero area and energy. In this tutorial, we're not
    # worried about calculating the energy or area of this component.
    subclass: dummy_storage
    attributes: {width: 16, depth: 64}

  - !Component
    name: cascade_tia
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: cascade_tia
    attributes:
      # technology: technology
      capacitance: 1e-15
      voltage: VOLTAGE
      v_sense: VOLTAGE/2
      width: 16
      stacked: False
  
  - !Component # Column readout (ADC)
    name: column_drivers
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: column_drivers
    attributes: {width: 16, <<<: *cim_component_attributes}
    
  - !Component # Row drivers feed inputs onto the rows of the array
    name: row_drivers
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: input_row_drivers
    attributes: {width: DAC_RESOLUTION, <<: *cim_component_attributes, temporal_spiking: true}

  - !ArrayContainer # Each column stores a different weight slice. Columns share inputs.
    name: column
    <<<: [*container_defaults, *spatial_must_reuse_inputs]
    spatial: {meshX: 64}
    constraints: {spatial: {maximize_dims: [Y, M]}}
    max_utilization: {spatial: {factors: [('M=' + str(column.get_fanout()))]}}

  - !ArrayContainer # Each row receives a different input. Rows share outputs.
    name: row
    <<<: [*container_defaults, *spatial_must_reuse_outputs]
    spatial: {meshY: 64}
    constraints: {spatial: {maximize_dims: [C, R, S]}}
    max_utilization: {spatial: {factors: [('C=' + str(row.get_fanout()))]}}



  - !Component # CiM unit stores weights and computes MACs. Defined in include/defines.yaml.
    <<<: *cim_unit 

  - !Hierarchical           # Virtualize an XxYxZ-bit MAC as multiple MAC units.
    nodes: *virtualized_mac # Defined in include/defines.yaml.
